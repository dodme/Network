엣지(Edge)
 - 사용자와 가장 가까운곳에 있는 네트워크장치가 있는곳을 엣지라고 한다
 - 유/무선 공유기, 라우터, 스위치등 네트워크 장비들을 엣지 디바이스라고 부르고 이 디바이스가 있는곳을 엣지라고 부른다

SD-WAN
 - WAN의 SD(Software Define), 즉 소프트웨어 기술을 접목한 새로운 WAN 기술
 - 과거에는 회사의 업무시스템을 다른곳에서 쾌적하게 사용하거나 본사와 지사간에 데이터통신을 하기 위해서는 MPLS라는 전용선이 필요했다.
   하지만 이 전용선이 비싸기도 하고, 여러 지사에 전부 MPLS를 설치하기엔 비용적인 부담이 커서 이것을 해결하기 위해 나온 기술
   SD-WAN은 본사와 지사간에 MPLS가 아니라 일반 인터넷망을 까는데 이 망 위에 소프트웨어 기술을 이용해서 가상의 전용선을 깔아서 연결해주는 기술이다
   전용선을 사용하는것보다는 조금 느리지만 일반 인터넷망을 이용하기때문에 비용이 저렴하다는 장점이 있다

제로 트러스트(Zero-Trust)
 - 회사가 아닌 회사 외부에서 업무등을 목적으로 회사의 업무시스템에 접속해야할때 단순히 아이디/비밀번호만으로는 신뢰를 확인할수 없을때 접근을 막는것
   이럴떄 아이디/패스워드 외에 추가적인 SMS인증이나 OTP인증등과 같은 추가적인 인증을 거쳐서 사용자를 증명했을때에만 접근을 허용하는 시스템을 제로트러스트라고 한다

VLAN
 - 근거리통신망(LAN)을 물리적으로 구현한것이 아닌 소프트웨어 기술을 사용해서 가상에 구현한것
   예를들어 공유기에 10개의 포트가 있다고 했을때 각각의 포트에 컴퓨터를 연결하면 10개의 LAN환경이 구현된것이다. 하지만 이게 아닌 1~5번을 VLAN1, 6~10번을 VLAN2로 구성하면 각각의 VLAN에 있는 PC끼리 통신이 가능하다
   이런식으로 하나의 네트워크 장비에 가상의 그룹을 만들어서 마치 추가장비를 둔것같은 효과를 주는것을 VLAN이라고 한다

백본(Backbone)
 - 인터넷을 사용하려면 먼저 신호를 유/무선 공유기를 통해서 보낸다. 그러면 신호가 유/무선 공유기를 통해서 밖으로 나가서 통신사(인터넷서비스 공급자)에게 전달이 되고 그곳에서 처리된 신호가 다시 반대루트를 통해서 사용자에게 전달이 되는식으로 인터넷이 된다
   이 사용자 인터넷신호가 모이는 거대한 네트워크를 백본이라고 한다

백홀(Backhaul)
 - 앞서 말했던 작은 네트워크와 백본을 연결하는 구간을 백홀이라고 부른다
 - 이전에 백홀은 지하에 광케이블을 매설해서 유선으로 구현을 했었지만 비용의 문제를 해결하기위해 무선백홀기술이 나왔다

로밍(Roaming)
 - 우리가 회사에서 무선 인터넷을 할때 특정 지역에 설치되어있는 무선AP(공유기)에 접속을 하는데 여기서 인터넷을 사용하다가 다른곳으로 이동해서 다른지역의 AP로 전환되는것을 로밍이라고 부른다
 - 보통 로밍이 발생할때는 일시적인 끊김현상이 있다

3 Tier 아키텍쳐
 - HCI(Hyper Converged Infrastructure) : 프라이빗 클라우드 구축을 위한 새로운 인프라 구축기술
 - 과거의 전통적인 아키텍쳐 인프라에서는 서버에 스토리지, 네트워크를 개별적으로 설치해서 연결해야했는데 이 구조를 3 Tier 아키텍쳐라고 부른다
   인프라규모가 커질수록 더 많은 서버, 스토리지, 네트워크장비가 추가가되야하고 이럴수록 복잡해져서 관리가 어려워지고, 규모의 확장때마다 성능의 증가가 일정하지 않기때문에 이것을 예상하기 어렵고 투자한만큼의 성능을 기대하기 힘들다

HCI(Hyper Converged Infrastructure)
 - 앞서 말했던 3 Tier 아키텍쳐에서 서버와 스토리지를 하나의 장비로 묶고 네트워크에 연결하는 2 Tier 아키텍쳐 방식을 사용한다
 - 이것으로 구조가 간단해져 관리가 쉬워지고, 성능의 병목구간이 줄었기때문에 성능의 증가폭이 일정하기때문에 예측하기 쉽다

컨테이너
 - 서버의 자원을 효율적으로 활용하기 위해서 탄생한 OS별로 가상화되는 기존의 가상머신과는 달리 OS위에서 운영되는 App별로 가상화가 가능한 작은 가상머신

쿠버네티스
 - 컨테이너가 크기도 작고 수량도 매우 많기때문에 이것을 관리하기위해 구글에서 만들어서 오픈소스로 공개한것
 - 현재 클라우드 인프라에서 컨테이너를 컴퓨팅 플랫폼으로 사용하여 운용되는 어플리케이션이나 서비스는 대부분이 쿠버네티스를 이용할정도로 컨테이너 관리 플랫폼의 표준으로 자리잡아있다

호스팅형 쿠버네티스
 - 구글이 오픈소스를 공개한 쿠버네티스를 클라우드서비스 제공 회사들이 자기들만의 기술을 가미해서 제공하고있는 자체적인 쿠버네티스 서비스

호스팅형 앱플랫폼
 - 클라우드환경에 알맞은 어플리케이션을 개발하는데에는 쿠버네티스 외에도 개발환경, 앱 배포환경, 모니터링 및 성능분석환경등 여러가지 요소들이 필요한데 이 요소들을 한데모아놓은게 파스형태의 호스팅형 앱 플랫폼이다

애플리케이션 현대화
 - 기존에 운영해왔던 애플리케이션을 최신의 클라우드환경에 알맞은 빠른 개발과 수정, 출시가 가능한 애플리케이션으로 탈바꿈 하자는것. 최신 클라우드 기술을 활용하자는것이 핵심
 - 컴퓨팅 플랫폼의경우 기존의 가상머신에서 아주 작은 컨테이너 플랫폼으로 바꿔올 필요가 있고, 처음부터 끝까지 모든것을 하나하나 완성해서 출시하는 Monolith Architecture가 아니라 기본적인 뼈대만 만들고 하나둘 살을 붙여나간 후 어느정도 기능구현만 됬을때 출시하는 Microservice Architecture형태로 전환한다

애플리케이션 재구축
 - 일반적으론 기존의 사용중이던 애플리케이션에 성능을 추가하거나 업그레이드시키는것이 일반적이지만 아예 처음부터 재구축하는 이유는 클라우드덕분이다
   클라우드덕분에 과거보다 애플리케이션의 개발 및 출시속도가 매우 빨라졌고, 인프라 운영도 간변해졌다(H/W 필요 없음) 그리고 과거에 비해 고객의 피드백이 훨씬 많아졌기때문에 이 피드백에 빠르게 대응해야한다.
   그래서 이런 클라우드환경에 맞는 애플리케이션이 필요해졌는데 기존에 사용하던 애플리케이션을 클라우드환경에 재활용해서 바꾸는데에는 너무 많은 시간도 걸리고 비용도 필요할것이기때문에 아예 처음부터 재구축하기로 한것이다

ITaaS(IT as a Service)
 - 기존에는 IT관리자가 직접 서버를 가져다놓은다음 설치하고 프로비저닝하는 작업들을 모두 해야했는데 ITaaS는 이런 작업들을 자동화 한 다음 마치 퍼블릭 클라우드에서 인프라를 배포하는것과 같이 온프레미스에서도 간편하게 필요한 서버 환경을 배포할 수 있는것을 서비스로 제공한다는 의미이다

서버 프로비저닝
 - IT관리자들이 새로운 서버를 구매하거나 개발자들을 위해 테스트서버를 제공해주기이 위해 하는 작업이 서버 구성 및 프로비저닝이다
   신규서버 하드웨어를 들여놓은 다음 OS 설치하고 스토리지와 네트워크 연결하고 미들웨어를 설치해서 애플리케이션이 돌아갈수 있는 환경을 준비하는 모든 작업을 서버 프로비저닝이라고 한다

클라우드 네이티브(Cloud Native) 전한
 - 기존의 온프레미스 환경에서 개발하고 운영했던 애플리케이션을 클라우드 환경에 맞게 새롭게 개발해서 운영하는것을 의미한다
 - 온프레미스 환경에서 개발된 애플리케이션은 현장의 요구사항을 수집하고 분석하고 설계해서 개발한 다음에 테스트하고 배포하고 이후에 유지보수하는 일련의 작업들을 정해진 절차에 따라서 개발하는 Waterfall(워터폴)방법론을 바탕으로 개발되었다. 그리고 애플리케이션의 UI 비즈니스 로직 데이터를 주고받는 것들이 하나의 커다란 틀 안에 있는 Monolithic(모놀리식) 아키텍처를 따르고있기때문에 개발절차가 명확하고 이미 계획된 목표에 따라 개발되서 중간에 개발방향이 변경되어서 배포 시기가 지연될일도 없지만 어느 한 부분을 수정하거나 뭔가 업데이트 하려면 이 전체를 다 건드려야하기때문에 작업이 불편하고 유지보수가 어렵다는 단점이 있다
   자체개발한 그룹웨어나 ERP, WMS, CMS 애플리케이션이 대표적인 워터폴 방법론과 모놀리식 아키텍쳐로 개발된 애플리케이션이다
 - 클라우드 네이티브 즉 클라우드 환경에 최적화된 애플리케이션은 요구사항 수집 분석 설계 개발 테스트 배포 각 부분을 최대한 빠르게 처리하는데에 초점을 맞춘 Agile(애자일) 방법론을 따른다. 그래서 중간에 계획이 변경되더라도 신속하게 반영이 가능하다
   애플리케이션을 구성하고있는 다양한 기능들을 각각의 독립된 모듈로 개발을 하고 이 모듈들은 컨테이너에서 운영이 되고 각자 서로 통신하는 형태로 개발되는 Microservice(마이크로서비스) 아키텍쳐를 따른다. 그래서 모놀리식 아키텍쳐로 개발된 애플리케이션과 비교해서 기능별 수정이 매우 용이한 장점이 있고, 덕분에 고객 피드백을 빠르게 반영하고 애플리케이션을 지속적으로 개선해나갈수 있다는 특징이 있다
   하지만 애플리케이션이 비대해질수록 모듈도 엄청 많아지기 떄문에 복잡성이 증가하는 단점이 있다. 이를 해결하기 위해서 다수의 컨테이너들을 효율적으로 관리할수 있는 쿠버네티스 플랫폼이 필요하다
   넷플릭스와 같은 OTT앱, 쿠팡과 같은 전자상거래(e-Commerce)앱, 그 밖에 다양한 SaaS 형태로 제공되는 기업용 애플리케이션이 대표적인 클라우드 네이티브 애플리케이션이다






